from _pydevd_bundle.pydevd_comm import (
    CMD_RUN,
    CMD_LIST_THREADS,
    CMD_THREAD_CREATE,
    CMD_THREAD_KILL,
    CMD_THREAD_SUSPEND,
    CMD_THREAD_RUN,
    CMD_STEP_INTO,
    CMD_STEP_OVER,
    CMD_STEP_RETURN,
    CMD_GET_VARIABLE,
    CMD_SET_BREAK,
    CMD_REMOVE_BREAK,
    CMD_EVALUATE_EXPRESSION,
    CMD_GET_FRAME,
    CMD_EXEC_EXPRESSION,
    CMD_WRITE_TO_CONSOLE,
    CMD_CHANGE_VARIABLE,
    CMD_RUN_TO_LINE,
    CMD_RELOAD_CODE,
    CMD_GET_COMPLETIONS,
    CMD_CONSOLE_EXEC,
    CMD_ADD_EXCEPTION_BREAK,
    CMD_REMOVE_EXCEPTION_BREAK,
    CMD_LOAD_SOURCE,
    CMD_ADD_DJANGO_EXCEPTION_BREAK,
    CMD_REMOVE_DJANGO_EXCEPTION_BREAK,
    CMD_SET_NEXT_STATEMENT,
    CMD_SMART_STEP_INTO,
    CMD_EXIT,
    CMD_SIGNATURE_CALL_TRACE,
    CMD_SET_PY_EXCEPTION,
    CMD_GET_FILE_CONTENTS,
    CMD_SET_PROPERTY_TRACE,
    CMD_EVALUATE_CONSOLE_EXPRESSION,
    CMD_RUN_CUSTOM_OPERATION,
    CMD_GET_BREAKPOINT_EXCEPTION,
    CMD_STEP_CAUGHT_EXCEPTION,
    CMD_SEND_CURR_EXCEPTION_TRACE,
    CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED,
    CMD_IGNORE_THROWN_EXCEPTION_AT,
    CMD_ENABLE_DONT_TRACE,
    CMD_SHOW_CONSOLE,
    CMD_GET_ARRAY,
    CMD_STEP_INTO_MY_CODE,
    CMD_GET_CONCURRENCY_EVENT,
    CMD_SHOW_RETURN_VALUES,
    CMD_INPUT_REQUESTED,
    CMD_GET_DESCRIPTION,
    CMD_PROCESS_CREATED,
    CMD_VERSION,
    CMD_RETURN,
    CMD_ERROR,
)

from ._command import (
    PyDevdCommandID, KIND_REQUEST, KIND_RESPONSE, KIND_EVENT,
)


# https://github.com/fabioz/PyDev.Debugger/blob/master/_pydevd_bundle/pydevd_comm.py
PYDEVD_ALL = {PyDevdCommandID(name)
              for name in vars()
              if name.startswith('CMD_')}


def import_command_ids(ns, cmdids=None):
    if cmdids is None:
        cmdids = PYDEVD_ALL
    for cmdid in cmdids:
        ns[cmdid.name] = cmdid


import_command_ids(vars())


########################
# supported by ptvsd

# ptvsd/wrapper.py
SUPPORTED_ALL = {
    CMD_ADD_EXCEPTION_BREAK,
    CMD_CHANGE_VARIABLE,
    CMD_GET_FRAME,
    CMD_GET_VARIABLE,
    CMD_LIST_THREADS,
    CMD_REMOVE_BREAK,
    CMD_REMOVE_EXCEPTION_BREAK,
    CMD_RUN,
    CMD_SEND_CURR_EXCEPTION_TRACE,
    CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED,
    CMD_SET_BREAK,
    CMD_STEP_INTO,
    CMD_STEP_OVER,
    CMD_STEP_RETURN,
    CMD_THREAD_CREATE,
    CMD_THREAD_KILL,
    CMD_THREAD_RUN,
    CMD_THREAD_SUSPEND,
    CMD_VERSION,
}

# .pydevd_request() / .pydevd_notify()
SUPPORTED_REQUESTS = {
    CMD_ADD_EXCEPTION_BREAK,
    CMD_REMOVE_BREAK,
    CMD_REMOVE_EXCEPTION_BREAK,
    CMD_SET_BREAK,
    CMD_STEP_INTO,
    CMD_STEP_OVER,
    CMD_STEP_RETURN,
    CMD_THREAD_RUN,
    CMD_THREAD_SUSPEND,

    # have responses:
    CMD_CHANGE_VARIABLE,
    CMD_GET_FRAME,
    CMD_GET_VARIABLE,
    CMD_LIST_THREADS,
    CMD_RUN,
    CMD_VERSION,
}

# .pydevd_request()
SUPPORTED_RESPONSES = {
    CMD_RETURN,  # for CMD_CHANGE_VARIABLE / CMD_LIST_THREADS
    CMD_GET_FRAME,
    CMD_GET_VARIABLE,
    CMD_RUN,  # TODO: what response?
    CMD_VERSION,
}

# @pydevd_events.handle()
SUPPORTED_EVENTS = {
    CMD_SEND_CURR_EXCEPTION_TRACE,
    CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED,
    CMD_THREAD_CREATE,
    CMD_THREAD_KILL,
    CMD_THREAD_RUN,
    CMD_THREAD_SUSPEND,
}

SUPPORTED = {
    KIND_REQUEST: SUPPORTED_REQUESTS,
    KIND_RESPONSE: SUPPORTED_RESPONSES,
    KIND_EVENT: SUPPORTED_EVENTS,
}


########################
# supported by pydevd

INFO = {
    CMD_SIGNATURE_CALL_TRACE,  # ???
    CMD_STEP_CAUGHT_EXCEPTION,
}

UNUSED = {
    CMD_GET_CONCURRENCY_EVENT,  # ???
    CMD_INPUT_REQUESTED,  # make_input_requested_message
}

IGNORED = INFO | UNUSED | {
    CMD_ERROR,
}

# https://github.com/fabioz/PyDev.Debugger/blob/master/_pydevd_bundle/pydevd_process_net_command.py
POSSIBLE_REQUESTS = {  # commands we *could* send
    CMD_ADD_DJANGO_EXCEPTION_BREAK,
    CMD_ADD_EXCEPTION_BREAK,
    CMD_CHANGE_VARIABLE,
    CMD_CONSOLE_EXEC,
    CMD_ENABLE_DONT_TRACE,
    CMD_EVALUATE_CONSOLE_EXPRESSION,
    CMD_EVALUATE_EXPRESSION,
    CMD_EXEC_EXPRESSION,
    CMD_GET_ARRAY,
    CMD_GET_COMPLETIONS,
    CMD_GET_DESCRIPTION,
    CMD_GET_FILE_CONTENTS,
    CMD_GET_FRAME,
    CMD_GET_VARIABLE,
    CMD_IGNORE_THROWN_EXCEPTION_AT,
    CMD_LIST_THREADS,
    CMD_LOAD_SOURCE,
    CMD_RELOAD_CODE,
    CMD_REMOVE_BREAK,
    CMD_REMOVE_DJANGO_EXCEPTION_BREAK,
    CMD_REMOVE_EXCEPTION_BREAK,
    CMD_RUN,
    CMD_RUN_CUSTOM_OPERATION,
    CMD_RUN_TO_LINE,
    CMD_SET_BREAK,
    CMD_SET_NEXT_STATEMENT,
    CMD_SET_PROPERTY_TRACE,
    CMD_SET_PY_EXCEPTION,
    CMD_SHOW_RETURN_VALUES,
    CMD_SMART_STEP_INTO,
    CMD_STEP_INTO,
    CMD_STEP_INTO_MY_CODE,
    CMD_STEP_OVER,
    CMD_STEP_RETURN,
    CMD_THREAD_KILL,
    CMD_THREAD_RUN,
    CMD_THREAD_SUSPEND,
    CMD_VERSION,
}
POSSIBLE_RESPONSES = {  # commands for which we will get responses
    CMD_EVALUATE_CONSOLE_EXPRESSION,
    CMD_EVALUATE_EXPRESSION,
    CMD_GET_ARRAY,
    CMD_GET_COMPLETIONS,
    CMD_GET_DESCRIPTION,
    CMD_GET_FILE_CONTENTS,
    CMD_GET_FRAME,
    CMD_GET_VARIABLE,
    CMD_LOAD_SOURCE,
    CMD_RETURN,
    CMD_RUN,  # XXX is there really a response?
    CMD_RUN_CUSTOM_OPERATION,
    CMD_VERSION,
}
POSSIBLE_RESPONSES_ONLY = {  # response commands which do not have requests
    CMD_RETURN,
}

POSSIBLE_RESPONSES_BY_REQUEST = {
    CMD_CHANGE_VARIABLE: CMD_RETURN,
    CMD_CONSOLE_EXEC: CMD_EVALUATE_EXPRESSION,
    CMD_EVALUATE_EXPRESSION: CMD_EVALUATE_EXPRESSION,
    CMD_EXEC_EXPRESSION: CMD_EVALUATE_EXPRESSION,
    CMD_LIST_THREADS: CMD_RETURN,
}
for resp in POSSIBLE_RESPONSES:
    if resp not in POSSIBLE_RESPONSES_BY_REQUEST.values():
        POSSIBLE_RESPONSES_BY_REQUEST.setdefault(resp, resp)
del resp

# Currently there are aren't any.
POSSIBLE_PYDEVD_REQUESTS = set([  # pydevd might send these requests
])
POSSIBLE_PYDEVD_RESPONSES = set([
])

# https://github.com/fabioz/PyDev.Debugger/blob/master/pydevd.py
POSSIBLE_EVENTS = {  # from pydevd
    CMD_EXIT,
    CMD_GET_BREAKPOINT_EXCEPTION,
    CMD_PROCESS_CREATED,
    CMD_SEND_CURR_EXCEPTION_TRACE,
    CMD_SEND_CURR_EXCEPTION_TRACE_PROCEEDED,
    CMD_SHOW_CONSOLE,
    CMD_THREAD_CREATE,
    CMD_THREAD_KILL,
    CMD_THREAD_RUN,
    CMD_THREAD_SUSPEND,
    CMD_WRITE_TO_CONSOLE,
}

POSSIBLE = {
    KIND_REQUEST: POSSIBLE_REQUESTS,
    KIND_RESPONSE: POSSIBLE_RESPONSES,
    KIND_EVENT: POSSIBLE_EVENTS,
}

POSSIBLE_ALL = (
    POSSIBLE_REQUESTS | set(POSSIBLE_RESPONSES) |
    POSSIBLE_PYDEVD_REQUESTS | set(POSSIBLE_PYDEVD_RESPONSES) |
    POSSIBLE_EVENTS
)
